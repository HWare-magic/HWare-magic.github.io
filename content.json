{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Python - Argparse_guidebook","slug":"Python-Argparse-guidebook","date":"2022-11-24T16:00:17.000Z","updated":"2022-11-24T18:32:07.984Z","comments":true,"path":"2022/11/25/Python-Argparse-guidebook/","link":"","permalink":"http://example.com/2022/11/25/Python-Argparse-guidebook/","excerpt":"","text":"主要学习官网文档模块功能的介绍argparse 模块的作用就是 在程序外加一个接口 通过命令的方式 向程序传入参数 可类比 ls -l 的例子 其中 -l就是可以看成一个参数 该模块 也有很多的参数 有可选参数 和默认的参数 其特点是 所有参数 均可自行定义 123import argparse ## 导入模块parser = argparse.ArgumentParser() ## 定义模块的声明 在括号内可以添加 描述性的内容parser.parse_args() ## 用于获取传进来的参数 类似于字典形式 可以通过args.参数名的形式访问 位置参数的介绍12345import argparseparser = argparse.ArgumentParser()parser.add_argument(&quot;echo&quot;) ## 添加参数args = parser.parse_args() print(args.echo) ## 把输入的参数保存在这里 12python3 prog.py foo ## 输入foo ## 输出 还可以添加一些描述性的内容 12345import argparseparser = argparse.ArgumentParser()parser.add_argument(&quot;echo&quot;, help=&quot;echo the string you use here&quot;) ## 这里出现提示 使用 help=‘’args = parser.parse_args()print(args.echo) 当输入的参数未声明类型的时候 默认是字符所以无法进行数字运算 123456789101112import argparseparser = argparse.ArgumentParser()parser.add_argument(&quot;square&quot;, help=&quot;display a square of a given number&quot;)args = parser.parse_args()print(args.square**2 ## 输出结果python3 prog.py 4Traceback (most recent call last): File &quot;prog.py&quot;, line 5, in &lt;module&gt; print(args.square**2)TypeError: unsupported operand type(s) for ** or pow(): &#x27;str&#x27; and &#x27;int 通过在add方法中 加入type = int 来指定类型 123456import argparseparser = argparse.ArgumentParser()parser.add_argument(&quot;square&quot;, help=&quot;display a square of a given number&quot;, type=int) ## 这里指定了了输入的类型args = parser.parse_args()print(args.square**2 可选参数介绍（使用- 来表示）1234567import argparseparser = argparse.ArgumentParser()parser.add_argument(&quot;--verbosity&quot;, help=&quot;increase output verbosity&quot;)## -- 表示为可选参数args = parser.parse_args()if args.verbosity: print(&quot;verbosity turned on&quot;) 可以给参数接受的类型时 如果只有两种选择 True and False，可以采用action = ‘store_true’来表示 1234567891011121314import argparseparser = argparse.ArgumentParser()parser.add_argument(&quot;--verbose&quot;, help=&quot;increase output verbosity&quot;, action=&quot;store_true&quot;)## 这里表示 verbose参数只有两种情况#为 args.verbose 赋值为 True。没有指定时则隐含地赋值为 Falseargs = parser.parse_args()if args.verbose: print(&quot;verbosity turned on&quot;)## 输出 python3 prog.py --verbose ## 指定时 为True 如果没有指定 则为falseverbosity turned on python3 prog.py --verbose 1 ## 这时不能再指定其他类型usage: prog.py [-h] [--verbose]prog.py: error: unrecognized arguments: 1 短选项可以使用一个-和一个字母来代替较长的参数 12345678910import argparseparser = argparse.ArgumentParser()parser.add_argument(&quot;-v&quot;, &quot;--verbose&quot;, help=&quot;increase output verbosity&quot;, action=&quot;store_true&quot;) ## 这里在输入参数时 使用 -v 和使用 --verbose一样args = parser.parse_args()if args.verbose: print(&quot;verbosity turned on&quot;) ## 输出 python3 prog.py -v verbosity turned o 结合位置参数和可选参数123456789101112131415161718192021222324import argparseparser = argparse.ArgumentParser()parser.add_argument(&quot;square&quot;, type=int, help=&quot;display a square of a given number&quot;)parser.add_argument(&quot;-v&quot;, &quot;--verbose&quot;, action=&quot;store_true&quot;, help=&quot;increase output verbosity&quot;) ## 这里两个参数 一个是必填参数 一个是可选参数 可以从结果看出两者的区别args = parser.parse_args()answer = args.square**2if args.verbose: print(f&quot;the square of &#123;args.square&#125; equals &#123;answer&#125;&quot;)else: print(answer) ##输出python3 prog.pyusage: prog.py [-h] [-v] squareprog.py: error: the following arguments are required: square ## 不输入必选参数会报错的python3 prog.py 416python3 prog.py 4 --verbose the square of 4 equals 16python3 prog.py --verbose 4the square of 4 equals 16 我们带回了一个位置参数，结果发生了报错。 注意顺序无关紧要 还可有通过choices 关键字来限定参数的输入范围 123456789101112131415import argparseparser = argparse.ArgumentParser()parser.add_argument(&quot;square&quot;, type=int, help=&quot;display a square of a given number&quot;)parser.add_argument(&quot;-v&quot;, &quot;--verbosity&quot;, type=int, choices=[0, 1, 2], help=&quot;increase output verbosity&quot;)## 这里choices 限定了 只能在0 1 2 中选args = parser.parse_args()answer = args.square**2if args.verbosity == 2: print(f&quot;the square of &#123;args.square&#125; equals &#123;answer&#125;&quot;)elif args.verbosity == 1: print(f&quot;&#123;args.square&#125;^2 == &#123;answer&#125;&quot;)else: print(answer) 还可以用count参数来表示输入参数的数字 123456789101112131415161718192021222324252627import argparseparser = argparse.ArgumentParser()parser.add_argument(&quot;square&quot;, type=int, help=&quot;display the square of a given number&quot;)parser.add_argument(&quot;-v&quot;, &quot;--verbosity&quot;, action=&quot;count&quot;, help=&quot;increase output verbosity&quot;)## 这里count 表示参数出现的个数 表且将这个数字传进来 -vv 等于2 -v等于1args = parser.parse_args()answer = args.square**2if args.verbosity == 2: print(f&quot;the square of &#123;args.square&#125; equals &#123;answer&#125;&quot;)elif args.verbosity == 1: print(f&quot;&#123;args.square&#125;^2 == &#123;answer&#125;&quot;)else: print(answer) ## 输出python3 prog.py 416python3 prog.py 4 -v4^2 == 16python3 prog.py 4 -vvthe square of 4 equals 16python3 prog.py 4 --verbosity --verbositythe square of 4 equals 16python3 prog.py 4 -v 1usage: prog.py [-h] [-v] squareprog.py: error: unrecognized arguments: 还可以加入一些默认值 default 1234567891011121314151617181920212223242526272829import argparseparser = argparse.ArgumentParser()parser.add_argument(&quot;x&quot;, type=int, help=&quot;the base&quot;)parser.add_argument(&quot;y&quot;, type=int, help=&quot;the exponent&quot;)parser.add_argument(&quot;-v&quot;, &quot;--verbosity&quot;, action=&quot;count&quot;, default=0) ## 当可选参数为出现时 默认为0args = parser.parse_args()answer = args.x**args.yif args.verbosity &gt;= 2: print(f&quot;&#123;args.x&#125; to the power &#123;args.y&#125; equals &#123;answer&#125;&quot;)elif args.verbosity &gt;= 1: print(f&quot;&#123;args.x&#125;^&#123;args.y&#125; == &#123;answer&#125;&quot;)else: print(answer) ## 输出 python3 prog.pyusage: prog.py [-h] [-v] x yprog.py: error: the following arguments are required: x, ypython3 prog.py -husage: prog.py [-h] [-v] x ypositional arguments: x the base y the exponentoptions: -h, --help show this help message and exit -v, --verbositypython3 prog.py 4 2 -v4^2 == 16 以及有可能两个参数产生矛盾 要尽可能避免 123456789101112131415161718192021222324252627282930313233import argparseparser = argparse.ArgumentParser()group = parser.add_mutually_exclusive_group()group.add_argument(&quot;-v&quot;, &quot;--verbose&quot;, action=&quot;store_true&quot;)group.add_argument(&quot;-q&quot;, &quot;--quiet&quot;, action=&quot;store_true&quot;)parser.add_argument(&quot;x&quot;, type=int, help=&quot;the base&quot;)parser.add_argument(&quot;y&quot;, type=int, help=&quot;the exponent&quot;)args = parser.parse_args()answer = args.x**args.yif args.quiet: print(answer)elif args.verbose: print(f&quot;&#123;args.x&#125; to the power &#123;args.y&#125; equals &#123;answer&#125;&quot;)else: print(f&quot;&#123;args.x&#125;^&#123;args.y&#125; == &#123;answer&#125;&quot;) # 输出 python3 prog.py 4 24^2 == 16python3 prog.py 4 2 -q16python3 prog.py 4 2 -v4 to the power 2 equals 16python3 prog.py 4 2 -vqusage: prog.py [-h] [-v | -q] x yprog.py: error: argument -q/--quiet: not allowed with argument -v/--verbosepython3 prog.py 4 2 -v --quietusage: prog.py [-h] [-v | -q] x yprog.py: error: argument -q/--quiet: not allowed with argument -v/--verbose ## 当q v 两个参数同时出现时 不知道该执行 if 还是elif 因为这里没有顺序的问题","categories":[],"tags":[]},{"title":"通过设置使得hexo正常显示图片和公式","slug":"picture","date":"2022-11-22T13:05:55.000Z","updated":"2022-11-22T19:44:47.343Z","comments":true,"path":"2022/11/22/picture/","link":"","permalink":"http://example.com/2022/11/22/picture/","excerpt":"","text":"插入图片 开始的时候 md文件可以显示 但是在网页上无法显示图片 后经过设置才可显示上图的样子 遂mark解决方式 原因:据说是编解码的问题 解决方案： 使用hexo官方的解决方案,使用模版变量, &#123;% asset_img slug [title] %&#125; 该方法可行性不好 因为这样在typaro和vscode中无法显示 那么写内容时和不合 步骤 配置hexo的_config.yml文件, 将 post_asset_folder 设置为true, 这样每次new 生成一个文章时都会同步生成一个同名的文件夹,然后设置相对或绝对路径 在博客根目录中下使用npm安装插件：npm install https://github.com/CodeFalling/hexo-asset-image --save 后续需要将图片放入到对应的文件夹下，但是对于很多截图很不方便 因此对于typora 通过设置（对偏好设置下的图片设置）可使得自动的将图片存入对应文件夹下： 以后直接粘贴图片就可以自动保存到 hexo 配置的 post_asset_folder 文件夹里,自动渲染了 注意这时的插入的格式为$![名称]（文件夹/图片名.png）$ 需要改为$![名称]（./文件夹/图片名.png）$ 参考文章链接：解决Hexo博客不显示图片的一种方法 - 简书 (jianshu.com) 插入公式Hexo渲染LaTeX公式关键Hexo渲染主题的两个重要因素：mathjax和kramed，前者是数学公式渲染引擎，后者是Hexo的markdown渲染引擎，hexo默认渲染引擎是marked，但是它不支持mathjax，因此需要替换引擎 1.Hexo添加mathjax1.如果hexo安装有hexo-math,需要先卸载它。卸载命令： npm uninstall hexo-math --save 2.安装mathjax，安装命令： npm install hexo-renderer-mathjax --save 3.hexo主题开启mathjax：这里和参考的文章不同 我才用的主题时github上下载的yilia主题 配置yilia中的_config.yml文件(将mathjax：false 改为 true) 2.hexo切换kramed引擎1.卸载marked引擎 npm uninstall hexo-renderer-marked --save 2.安装kramed引擎 npm install hexo-renderer-kramed --save 3.修改引擎bug: 修改文件/node_modules\\kramed\\lib\\rules\\inline.js中escape和em两行，具体修改如下： 12// escape: /^\\\\([\\\\`*&#123;&#125;\\[\\]()#$+\\-.!_&gt;])/, escape: /^\\\\([`*\\[\\]()#$+\\-.!_&gt;])/, 12// em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, 4.重新启动hexo: 1hexo clean &amp;&amp; hexo g -d \\mu \\theta_b = f\\frac{Gm_1m_2}{r^3}可显示公式：\\mu \\theta_b \\frac{Gm_1m_2}{R^3} 参考文章：Hexo渲染LaTeX公式 - 简书 (jianshu.com)","categories":[],"tags":[]},{"title":"深度学习关于数据归一化的做法","slug":"深度学习关于数据归一化的做法","date":"2022-11-02T17:00:41.000Z","updated":"2022-11-02T17:01:09.626Z","comments":true,"path":"2022/11/03/深度学习关于数据归一化的做法/","link":"","permalink":"http://example.com/2022/11/03/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%BD%92%E4%B8%80%E5%8C%96%E7%9A%84%E5%81%9A%E6%B3%95/","excerpt":"","text":"算法介绍 我的数据格式 ：是70个时序数据为一个特征 对应一个label 就是一个向量 我需要做的是将每个特征中的70个数据 归一化成均值为零 方差为一的特征 具体做法$\\frac{(feature -feature.mean(dim=-1))}{feature.std(dim=-1)} $ 这么做会使得输入的维度发生变化 是因为 mean 和std 方法会使得被操作的那个维度被消除，因此在操作是需要加入keepdim = True 这样使得输入的结果不会存在维度不同的问题 这里训练的效果依然不是很好 后续的方案 需要在输出加入残差 同时 可以增大hidden的大小 可以试着使用output做","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-11-02T13:51:19.629Z","updated":"2022-11-02T13:51:19.629Z","comments":true,"path":"2022/11/02/hello-world/","link":"","permalink":"http://example.com/2022/11/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}